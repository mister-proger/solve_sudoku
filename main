def solve_sudoku(board):

    def is_valid(x, y, val):

        # Проверка, что цифра val можно поставить в клетку с координатами (x, y)

        for i in range(9):

            if board[x][i] == val or board[i][y] == val:

                return False

        row, col = x // 3 * 3, y // 3 * 3

        for i in range(row, row + 3):

            for j in range(col, col + 3):

                if board[i][j] == val:

                    return False

        return True

    

    def backtrack():

        # Поиск первой свободной клетки

        for i in range(9):

            for j in range(9):

                if board[i][j] == '.':

                    # Перебор всех возможных цифр

                    for val in range(1, 10):

                        if is_valid(i, j, str(val)):

                            board[i][j] = str(val)

                            # Рекурсивный вызов функции backtrack

                            if backtrack():

                                return True

                            board[i][j] = '.'

                    # Если не нашли подходящее число для клетки, вернуть False

                    return False

        # Если все клетки заполнены, то решение найдено

        return True

    if backtrack():

        return board

    else:

        return None

board = [

    ['5', '3', '.', '.', '7', '.', '.', '.', '.'],

    ['6', '.', '.', '1', '9', '5', '.', '.', '.'],

    ['.', '9', '8', '.', '.', '.', '.', '6', '.'],

    ['8', '.', '.', '.', '6', '.', '.', '.', '3'],

    ['4', '.', '.', '8', '.', '3', '.', '.', '1'],

    ['7', '.', '.', '.', '2', '.', '.', '.', '6'],

    ['.', '6', '.', '.', '.', '.', '2', '8', '.'],

    ['.', '.', '.', '4', '1', '9', '.', '.', '5'],

    ['.', '.', '.', '.', '8', '.', '.', '7', '9']

]

print(solve_sudoku(board))

